[{"F:\\webdev\\Full-Stack-App\\client\\src\\index.js":"1","F:\\webdev\\Full-Stack-App\\client\\src\\App.js":"2","F:\\webdev\\Full-Stack-App\\client\\src\\reportWebVitals.js":"3","F:\\webdev\\Full-Stack-App\\client\\src\\Components\\RandomNo.js":"4","F:\\webdev\\Full-Stack-App\\client\\src\\Components\\Posts.js":"5","F:\\webdev\\Full-Stack-App\\client\\src\\Components\\BondCalculator.js":"6"},{"size":517,"mtime":1609687959662,"results":"7","hashOfConfig":"8"},{"size":2137,"mtime":1612433675868,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1609687959667,"results":"10","hashOfConfig":"8"},{"size":4770,"mtime":1612427426163,"results":"11","hashOfConfig":"8"},{"size":6687,"mtime":1612460162197,"results":"12","hashOfConfig":"8"},{"size":4006,"mtime":1612433542592,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ceqrwg",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"F:\\webdev\\Full-Stack-App\\client\\src\\index.js",[],["28","29"],"F:\\webdev\\Full-Stack-App\\client\\src\\App.js",[],"F:\\webdev\\Full-Stack-App\\client\\src\\reportWebVitals.js",[],"F:\\webdev\\Full-Stack-App\\client\\src\\Components\\RandomNo.js",["30","31"],"import {\r\n  Button,\r\n  Card,\r\n  CardContent,\r\n  TextField,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst RandomNo = () => {\r\n  const [randomNo, setRandomNo] = useState(parseInt(Math.random() * 100));\r\n  const [input, setInput] = useState();\r\n  const [ans, setAns] = useState(\"\");\r\n  const [chances, setChances] = useState(7);\r\n  const [disabled, setDisabled] = useState(false);\r\n  const [disableReset, setDisableReset] = useState(false);\r\n\r\n  const handleChange = (event) => {\r\n    setInput(event.target.value);\r\n  };\r\n  const handleReset = () => {\r\n    setInput(\"\");\r\n    setAns(\"\");\r\n    setChances(7);\r\n    setDisabled(false);\r\n    setRandomNo(parseInt(Math.random() * 100));\r\n  };\r\n\r\n  const handleClear = () => {\r\n    setInput(\"\");\r\n  };\r\n\r\n  const message = (guessInput) => {\r\n    let random = Number(randomNo);\r\n    guessInput = Number(guessInput);\r\n    console.log(\"guessInput:\", guessInput, \"randomNumber:\", random);\r\n    if (chances === 1 && guessInput !== random) {\r\n      return (\r\n        \"Oops, U have lost all ur CHANCES :(   Can't u even guess '\" +\r\n        random +\r\n        \"' ??\"\r\n      );\r\n    }\r\n    if (guessInput === random - 1) {\r\n      return guessInput + \" is LOW but u r almost there!!\";\r\n    } else if (guessInput === random + 1) {\r\n      return guessInput + \" is HIGH but u r almost there!!\";\r\n    } else if (guessInput === random) {\r\n      return \"Hurray!! It's a correct guess.\";\r\n    } else if (guessInput < random - 1 && guessInput >= random - 5) {\r\n      return \"low but very close!!\";\r\n    } else if (guessInput > random + 1 && guessInput <= random + 5) {\r\n      return \"High butvery  close!!\";\r\n    } else if (guessInput < random - 5 && guessInput >= random - 10) {\r\n      return \"low but near!!\";\r\n    } else if (guessInput > random + 5 && guessInput <= random + 10) {\r\n      return \"High but near!!\";\r\n    } else if (guessInput < random - 10) {\r\n      return \"Too Low!!\";\r\n    } else if (guessInput > random + 10) {\r\n      return \"Too High!!\";\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const delay = (ms) => new Promise((res) => setTimeout(res, ms));\r\n    setDisabled(true);\r\n\r\n    await delay(1000);\r\n    setAns(message(input));\r\n\r\n    if (chances === 1) {\r\n      setDisabled(true);\r\n      setChances(0);\r\n    } else if (Number(input) === Number(randomNo)) {\r\n      setDisabled(true);\r\n    } else {\r\n      setChances(chances - 1);\r\n      setDisabled(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div style={{ textAlign: \"center\", marginTop: \"150px\" }}>\r\n        <Typography variant=\"h4\">Guess the NUMBER!</Typography>\r\n      </div>\r\n      <Card\r\n        style={{\r\n          marginTop: \"50px\",\r\n          width: \"30%\",\r\n          marginLeft: \"35%\",\r\n          boxShadow: \"0 8px 8px 0 rgba(0, 0, 0, 0.4)\",\r\n          padding: \"10px\",\r\n        }}\r\n      >\r\n        <CardContent style={{ fontWeight: \"bold\" }}>\r\n          <form onSubmit={handleSubmit}>\r\n            <Typography style={{ fontWeight: \"bold\" }}>\r\n              Enter your Guess no (0-100) :\r\n            </Typography>\r\n            <TextField\r\n              required\r\n              variant=\"outlined\"\r\n              type=\"number\"\r\n              placeholder=\"Type your No\"\r\n              value={input}\r\n              onChange={handleChange}\r\n              disabled={disabled}\r\n              style={{ margin: \"10px\" }}\r\n            />\r\n            <Typography style={{ margin: \"30px\" }}>\r\n              {\" \"}\r\n              {chances + \" chances u have!!\"}\r\n            </Typography>\r\n\r\n            <Typography\r\n              style={{\r\n                margin: \"30px\",\r\n                fontFamily: \"cursive\",\r\n                color: \"green\",\r\n                fontWeight: \"bold\",\r\n              }}\r\n            >\r\n              {\" \"}\r\n              {ans}\r\n            </Typography>\r\n\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              type=\"submit\"\r\n              style={{ margin: \"20px\" }}\r\n              disabled={disabled}\r\n            >\r\n              Check\r\n            </Button>\r\n            <Button\r\n              onClick={handleClear}\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              style={{ margin: \"20px\" }}\r\n              disabled={disabled}\r\n            >\r\n              Clear\r\n            </Button>\r\n            <Button\r\n              variant=\"outlined\"\r\n              color=\"secondary\"\r\n              style={{ margin: \"20px\" }}\r\n              disabled={disableReset}\r\n              onClick={handleReset}\r\n            >\r\n              Reset\r\n            </Button>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\nexport default RandomNo;\r\n","F:\\webdev\\Full-Stack-App\\client\\src\\Components\\Posts.js",["32"],"F:\\webdev\\Full-Stack-App\\client\\src\\Components\\BondCalculator.js",["33","34","35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":8,"column":10,"nodeType":"42","messageId":"43","endLine":8,"endColumn":13},{"ruleId":"40","severity":1,"message":"44","line":17,"column":24,"nodeType":"42","messageId":"43","endLine":17,"endColumn":39},{"ruleId":"40","severity":1,"message":"45","line":176,"column":19,"nodeType":"42","messageId":"43","endLine":176,"endColumn":20},{"ruleId":"40","severity":1,"message":"46","line":1,"column":27,"nodeType":"42","messageId":"43","endLine":1,"endColumn":36},{"ruleId":"47","severity":1,"message":"48","line":27,"column":42,"nodeType":"49","messageId":"50","endLine":27,"endColumn":43},{"ruleId":"40","severity":1,"message":"51","line":29,"column":11,"nodeType":"42","messageId":"43","endLine":29,"endColumn":21},"no-native-reassign",["52"],"no-negated-in-lhs",["53"],"no-unused-vars","'set' is defined but never used.","Identifier","unusedVar","'setDisableReset' is assigned a value but never used.","'d' is assigned a value but never used.","'useEffect' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'postedData' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]